CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
PROJECT(TinyVisualizer)

#COMPILE SETTINGS
SET(CMAKE_BUILD_TYPE Release CACHE STRING "Compiler optimization level")
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -W0 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    ADD_COMPILE_DEFINITIONS(_GLIBCXX_DEBUG=1)
    SET(CMAKE_CXX_FLAGS "-include cstring -O0 -Wall -fPIC -std=c++11 -Wno-unused-function ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -W0 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-include cstring -O3 -Wall -fPIC -std=c++11 -Wno-unused-function ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

#C++11 ABI
OPTION(USE_CXX11_ABI "Whether to use C++11's ABI" ON)
IF(NOT ${USE_CXX11_ABI})
  MESSAGE(STATUS "Disabling C++11's ABI")
  SET(CMAKE_CXX_FLAGS "-D_GLIBCXX_USE_CXX11_ABI=0 ${CMAKE_CXX_FLAGS}")
ELSE()
  MESSAGE(STATUS "Enabling C++11's ABI")
ENDIF()

#LIBRARY
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#THIRD PARTY HEADERS
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/extern ${PROJECT_SOURCE_DIR}/extern/imgui ${PROJECT_SOURCE_DIR}/extern/glad/include)
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
ENDMACRO(SEARCH_SOURCE)
SEARCH_SOURCE(TinyVisualizer TinyVisualizer)
SEARCH_SOURCE(GLAD extern/glad)

#BUILD LIBRARY
IF(MSVC)
  ADD_LIBRARY(TinyVisualizer STATIC ${sourceTinyVisualizer} ${headerTinyVisualizer} ${sourceGLAD} ${headerGLAD} ${IMGUI})
ELSE(MSVC)
  ADD_LIBRARY(TinyVisualizer SHARED ${sourceTinyVisualizer} ${headerTinyVisualizer} ${sourceGLAD} ${headerGLAD} ${IMGUI})
ENDIF(MSVC)
SET_TARGET_PROPERTIES(TinyVisualizer PROPERTIES PUBLIC_HEADER "${headerTinyVisualizer}")
TARGET_LINK_LIBRARIES(TinyVisualizer ${ALL_LIBRARIES})

#INSTALL LIBRARY
IF(MSVC)
  SET(CMAKE_INSTALL_PREFIX "C:/TinyVisualizer")
ELSE(MSVC)
  SET(CMAKE_INSTALL_PREFIX "/usr/local")
ENDIF(MSVC)
INSTALL(TARGETS TinyVisualizer
  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_PREFIX}/include/TinyVisualizer)
INSTALL(DIRECTORY extern/glad/include 
  DESTINATION ${CMAKE_INSTALL_PREFIX}
  FILES_MATCHING PATTERN gl.h PATTERN khrplatform.h)
INSTALL(DIRECTORY extern/imgui
  DESTINATION ${CMAKE_INSTALL_PREFIX}/include
  FILES_MATCHING PATTERN imgui.h PATTERN imconfig.h)
INSTALL(DIRECTORY cmake
  DESTINATION ${CMAKE_INSTALL_PREFIX}
  FILES_MATCHING PATTERN FindTinyVisualizer.cmake)

#SWIG-Python
SET(PYTHON_BINDING None CACHE STRING "Build SWIG-Python interface")
SET_PROPERTY(CACHE PYTHON_BINDING PROPERTY STRINGS None Python2 Python3)
IF(PYTHON_BINDING STREQUAL "Python2")
  FIND_PACKAGE(Python2 REQUIRED COMPONENTS Interpreter Development NumPy)
  SET(Python_INCLUDE_DIRS ${Python2_INCLUDE_DIRS})
  SET(Python_LIBRARIES ${Python2_LIBRARIES})
  SET(Python_SITELIB ${Python2_SITELIB})
  FIND_PACKAGE(SWIG COMPONENTS python)
  IF(Python2_FOUND)
    MESSAGE(STATUS "Found Python${Python2_VERSION}")
  ELSE()
    MESSAGE(WARNING "Cannot find Python2!")
    SET(PYTHON_BINDING "None")
  ENDIF()
  IF(SWIG_FOUND)
    MESSAGE(STATUS "Found swig${SWIG_VERSION}")
  ELSE()
    MESSAGE(WARNING "Cannot find swig!")
    SET(PYTHON_BINDING "None")
  ENDIF()
ELSEIF(PYTHON_BINDING STREQUAL "Python3")
  FIND_PACKAGE(Python3 REQUIRED COMPONENTS Interpreter Development NumPy)
  SET(Python_INCLUDE_DIRS ${Python3_INCLUDE_DIRS})
  SET(Python_LIBRARIES ${Python3_LIBRARIES})
  SET(Python_SITELIB ${Python3_SITELIB})
  FIND_PACKAGE(SWIG COMPONENTS python)
  IF(Python3_FOUND)
    MESSAGE(STATUS "Found Python${Python3_VERSION}")
  ELSE()
    MESSAGE(WARNING "Cannot find Python3!")
    SET(PYTHON_BINDING "None")
  ENDIF()
  IF(SWIG_FOUND)
    MESSAGE(STATUS "Found swig${SWIG_VERSION}")
  ELSE()
    MESSAGE(WARNING "Cannot find swig!")
    SET(PYTHON_BINDING "None")
  ENDIF()
ENDIF()
IF(NOT (PYTHON_BINDING STREQUAL "None"))
  CMAKE_POLICY(SET CMP0078 NEW)
  CMAKE_POLICY(SET CMP0086 NEW)
  INCLUDE(UseSWIG)
  INCLUDE_DIRECTORIES(${Python_INCLUDE_DIRS})
  IF(MSVC OR APPLE)
    INCLUDE_DIRECTORIES(${Python_SITELIB}/numpy/core/include)
  ENDIF(MSVC OR APPLE)
  SET(sourceSWIG "${PROJECT_SOURCE_DIR}/Swig/module.i")
  SET_SOURCE_FILES_PROPERTIES(${sourceSWIG} PROPERTIES CPLUSPLUS ON SWIG_MODULE_NAME pyTinyVisualizer)
  SWIG_ADD_LIBRARY(pyTinyVisualizer LANGUAGE python SOURCES ${sourceSWIG})
  SWIG_LINK_LIBRARIES(pyTinyVisualizer ${Python_LIBRARIES} TinyVisualizer)
  INSTALL(TARGETS TinyVisualizer 
          ARCHIVE DESTINATION ${Python_SITELIB}/pyTinyVisualizer
          LIBRARY DESTINATION ${Python_SITELIB}/pyTinyVisualizer
          PUBLIC_HEADER DESTINATION ${Python_SITELIB}/pyTinyVisualizer)
  INSTALL(TARGETS pyTinyVisualizer LIBRARY DESTINATION ${Python_SITELIB}/pyTinyVisualizer)
  INSTALL(FILES ${CMAKE_BINARY_DIR}/pyTinyVisualizer.py DESTINATION ${Python_SITELIB}/pyTinyVisualizer)
ENDIF()

#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
  TARGET_LINK_LIBRARIES(${NAME} TinyVisualizer ${ALL_LIBRARIES})
ENDMACRO(ADD_EXE)
#DEBUG
ADD_EXE(mainBox2D)
ADD_EXE(mainBullet3D)
ADD_EXE(mainVisibility)
ADD_EXE(mainSphericalBoxAndPoints)
ADD_EXE(mainTerrain)
ADD_EXE(mainChecker)
ADD_EXE(mainOctree)
ADD_EXE(mainBezier)
ADD_EXE(mainLight)
ADD_EXE(mainArrow)
ADD_EXE(mainCell)
ADD_EXE(mainImGui)
ADD_EXE(mainMesh)

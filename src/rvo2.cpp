/* Generated by Cython 0.26.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/RVOSimulator.h", 
            "src/Vector2.h"
        ], 
        "extra_compile_args": [
            "-fPIC"
        ], 
        "include_dirs": [
            "src"
        ], 
        "language": "c++", 
        "libraries": [
            "RVO"
        ], 
        "library_dirs": [
            "build/RVO2/src"
        ], 
        "name": "rvo2", 
        "sources": [
            "src/rvo2.pyx"
        ]
    }, 
    "module_name": "rvo2"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__rvo2
#define __PYX_HAVE_API__rvo2
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "Vector2.h"
#include "RVOSimulator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/rvo2.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_4rvo2_PyRVOSimulator;

/* "rvo2.pyx":92
 *         float getAgentCarPhi(size_t agentNo)
 * 
 * cdef class PyRVOSimulator:             # <<<<<<<<<<<<<<
 *     cdef RVOSimulator *thisptr
 * 
 */
struct __pyx_obj_4rvo2_PyRVOSimulator {
  PyObject_HEAD
  RVO::RVOSimulator *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'rvo2' */
static PyTypeObject *__pyx_ptype_4rvo2_PyRVOSimulator = 0;
#define __Pyx_MODULE_NAME "rvo2"
int __pyx_module_is_main_rvo2 = 0;

/* Implementation of 'rvo2' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_ka[] = "ka";
static const char __pyx_k_kp[] = "kp";
static const char __pyx_k_kv[] = "kv";
static const char __pyx_k_dtc[] = "dtc";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_deltaV[] = "deltaV";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_phiMax[] = "phiMax";
static const char __pyx_k_point1[] = "point1";
static const char __pyx_k_point2[] = "point2";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_line_no[] = "line_no";
static const char __pyx_k_agent_no[] = "agent_no";
static const char __pyx_k_deltaPhi[] = "deltaPhi";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_maxSpeed[] = "maxSpeed";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_timeStep[] = "timeStep";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_max_speed[] = "max_speed";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_agentCarNo[] = "agentCarNo";
static const char __pyx_k_aDrivingMax[] = "aDrivingMax";
static const char __pyx_k_neighbor_no[] = "neighbor_no";
static const char __pyx_k_obstacle_no[] = "obstacle_no";
static const char __pyx_k_timeHorizon[] = "timeHorizon";
static const char __pyx_k_vDrivingMax[] = "vDrivingMax";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_maxNeighbors[] = "maxNeighbors";
static const char __pyx_k_neighborDist[] = "neighborDist";
static const char __pyx_k_time_horizon[] = "time_horizon";
static const char __pyx_k_vSteeringMax[] = "vSteeringMax";
static const char __pyx_k_max_neighbors[] = "max_neighbors";
static const char __pyx_k_neighbor_dist[] = "neighbor_dist";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_errorPreferred[] = "errorPreferred";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_timeHorizonObst[] = "timeHorizonObst";
static const char __pyx_k_time_horizon_obst[] = "time_horizon_obst";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Either_pass_only_pos_or_pass_all[] = "Either pass only 'pos', or pass all parameters.";
static const char __pyx_k_Error_adding_agent_to_RVO_simula[] = "Error adding agent to RVO simulation";
static const char __pyx_k_Error_adding_obstacle_to_RVO_sim[] = "Error adding obstacle to RVO simulation";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_kp_s_Either_pass_only_pos_or_pass_all;
static PyObject *__pyx_kp_s_Error_adding_agent_to_RVO_simula;
static PyObject *__pyx_kp_s_Error_adding_obstacle_to_RVO_sim;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_aDrivingMax;
static PyObject *__pyx_n_s_agentCarNo;
static PyObject *__pyx_n_s_agent_no;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_deltaPhi;
static PyObject *__pyx_n_s_deltaV;
static PyObject *__pyx_n_s_dtc;
static PyObject *__pyx_n_s_errorPreferred;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ka;
static PyObject *__pyx_n_s_kp;
static PyObject *__pyx_n_s_kv;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_line_no;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxNeighbors;
static PyObject *__pyx_n_s_maxSpeed;
static PyObject *__pyx_n_s_max_neighbors;
static PyObject *__pyx_n_s_max_speed;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_neighborDist;
static PyObject *__pyx_n_s_neighbor_dist;
static PyObject *__pyx_n_s_neighbor_no;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obstacle_no;
static PyObject *__pyx_n_s_phiMax;
static PyObject *__pyx_n_s_point1;
static PyObject *__pyx_n_s_point2;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timeHorizon;
static PyObject *__pyx_n_s_timeHorizonObst;
static PyObject *__pyx_n_s_timeStep;
static PyObject *__pyx_n_s_time_horizon;
static PyObject *__pyx_n_s_time_horizon_obst;
static PyObject *__pyx_n_s_vDrivingMax;
static PyObject *__pyx_n_s_vSteeringMax;
static PyObject *__pyx_n_s_velocity;
static int __pyx_pf_4rvo2_14PyRVOSimulator___cinit__(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_timeStep, float __pyx_v_neighborDist, size_t __pyx_v_maxNeighbors, float __pyx_v_timeHorizon, float __pyx_v_timeHorizonObst, float __pyx_v_radius, float __pyx_v_maxSpeed, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_2addAgent(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_neighborDist, PyObject *__pyx_v_maxNeighbors, PyObject *__pyx_v_timeHorizon, PyObject *__pyx_v_timeHorizonObst, PyObject *__pyx_v_radius, PyObject *__pyx_v_maxSpeed, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_4addAgentCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_neighborDist, PyObject *__pyx_v_maxNeighbors, PyObject *__pyx_v_timeHorizon, PyObject *__pyx_v_timeHorizonObst, PyObject *__pyx_v_radius, PyObject *__pyx_v_maxSpeed, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_6setCarLookupTable(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_8addObstacle(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_10clearObstacle(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_12doStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_14computeAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_16updateAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_18doStepCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_20getAgentAgentNeighbor(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_neighbor_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_22getAgentMaxNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_24getAgentMaxSpeed(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_26getAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_28getAgentNumAgentNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_30getAgentNumObstacleNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_32getAgentNumORCALines(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_34getAgentObstacleNeighbor(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_obstacle_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_36getAgentORCALine(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_line_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_38getAgentPosition(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_40getAgentPrefVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_42getAgentRadius(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_44getAgentTimeHorizon(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_46getAgentTimeHorizonObst(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_48getAgentVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_50getGlobalTime(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_52getNumAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_54getNumObstacleVertices(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_56getObstacleVertex(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_58getNextObstacleVertexNo(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_60getPrevObstacleVertexNo(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_62getTimeStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_64processObstacles(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_66queryVisibility(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_point1, PyObject *__pyx_v_point2, float __pyx_v_radius); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_68setAgentDefaults(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_neighbor_dist, size_t __pyx_v_max_neighbors, float __pyx_v_time_horizon, float __pyx_v_time_horizon_obst, float __pyx_v_radius, float __pyx_v_max_speed, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_70setAgentMaxNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_max_neighbors); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_72setAgentMaxSpeed(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_max_speed); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_74setAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_neighbor_dist); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_76setAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_neighbor_dist); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_78setAgentPosition(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_80setAgentPrefVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_82setAgentRadius(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_radius); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_84setAgentTimeHorizon(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_time_horizon); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_86setAgentTimeHorizonObst(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_timeHorizonObst); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_88setAgentVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_90setCarProperties(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_length, float __pyx_v_radius, float __pyx_v_vDrivingMax, float __pyx_v_vSteeringMax, float __pyx_v_aDrivingMax, float __pyx_v_phiMax, float __pyx_v_dtc, float __pyx_v_errorPreferred, float __pyx_v_ka, float __pyx_v_kv, float __pyx_v_kp, float __pyx_v_deltaV, float __pyx_v_deltaPhi); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_92setTimeStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_time_step); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_94shouldUpdate(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_96setAgentCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentCarNo, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_98getAgentCarTheta(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentNo); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_100getAgentCarPhi(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentNo); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4rvo2_PyRVOSimulator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;

/* "rvo2.pyx":95
 *     cdef RVOSimulator *thisptr
 * 
 *     def __cinit__(self, float timeStep, float neighborDist, size_t maxNeighbors,             # <<<<<<<<<<<<<<
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):
 */

/* Python wrapper */
static int __pyx_pw_4rvo2_14PyRVOSimulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4rvo2_14PyRVOSimulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_timeStep;
  float __pyx_v_neighborDist;
  size_t __pyx_v_maxNeighbors;
  float __pyx_v_timeHorizon;
  float __pyx_v_timeHorizonObst;
  float __pyx_v_radius;
  float __pyx_v_maxSpeed;
  PyObject *__pyx_v_velocity = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeStep,&__pyx_n_s_neighborDist,&__pyx_n_s_maxNeighbors,&__pyx_n_s_timeHorizon,&__pyx_n_s_timeHorizonObst,&__pyx_n_s_radius,&__pyx_n_s_maxSpeed,&__pyx_n_s_velocity,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "rvo2.pyx":97
 *     def __cinit__(self, float timeStep, float neighborDist, size_t maxNeighbors,
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 * 
 */
    values[7] = ((PyObject*)__pyx_tuple_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeStep)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighborDist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 1); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxNeighbors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 2); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 3); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizonObst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 4); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 5); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, 6); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timeStep = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_timeStep == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    __pyx_v_neighborDist = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_neighborDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    __pyx_v_maxNeighbors = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_maxNeighbors == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    __pyx_v_timeHorizon = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_timeHorizon == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L3_error)
    __pyx_v_timeHorizonObst = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_timeHorizonObst == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L3_error)
    __pyx_v_maxSpeed = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_maxSpeed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    __pyx_v_velocity = ((PyObject*)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), (&PyTuple_Type), 1, "velocity", 1))) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator___cinit__(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_timeStep, __pyx_v_neighborDist, __pyx_v_maxNeighbors, __pyx_v_timeHorizon, __pyx_v_timeHorizonObst, __pyx_v_radius, __pyx_v_maxSpeed, __pyx_v_velocity);

  /* "rvo2.pyx":95
 *     cdef RVOSimulator *thisptr
 * 
 *     def __cinit__(self, float timeStep, float neighborDist, size_t maxNeighbors,             # <<<<<<<<<<<<<<
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4rvo2_14PyRVOSimulator___cinit__(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_timeStep, float __pyx_v_neighborDist, size_t __pyx_v_maxNeighbors, float __pyx_v_timeHorizon, float __pyx_v_timeHorizonObst, float __pyx_v_radius, float __pyx_v_maxSpeed, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_velocity;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rvo2.pyx":98
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr = new RVOSimulator(timeStep, neighborDist, maxNeighbors,
 */
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_v_c_velocity = __pyx_t_4;

  /* "rvo2.pyx":100
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 * 
 *         self.thisptr = new RVOSimulator(timeStep, neighborDist, maxNeighbors,             # <<<<<<<<<<<<<<
 *                                         timeHorizon, timeHorizonObst, radius,
 *                                         maxSpeed, c_velocity)
 */
  __pyx_v_self->thisptr = new RVO::RVOSimulator(__pyx_v_timeStep, __pyx_v_neighborDist, __pyx_v_maxNeighbors, __pyx_v_timeHorizon, __pyx_v_timeHorizonObst, __pyx_v_radius, __pyx_v_maxSpeed, __pyx_v_c_velocity);

  /* "rvo2.pyx":95
 *     cdef RVOSimulator *thisptr
 * 
 *     def __cinit__(self, float timeStep, float neighborDist, size_t maxNeighbors,             # <<<<<<<<<<<<<<
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":104
 *                                         maxSpeed, c_velocity)
 * 
 *     def addAgent(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_3addAgent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_3addAgent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_neighborDist = 0;
  PyObject *__pyx_v_maxNeighbors = 0;
  PyObject *__pyx_v_timeHorizon = 0;
  PyObject *__pyx_v_timeHorizonObst = 0;
  PyObject *__pyx_v_radius = 0;
  PyObject *__pyx_v_maxSpeed = 0;
  PyObject *__pyx_v_velocity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAgent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos,&__pyx_n_s_neighborDist,&__pyx_n_s_maxNeighbors,&__pyx_n_s_timeHorizon,&__pyx_n_s_timeHorizonObst,&__pyx_n_s_radius,&__pyx_n_s_maxSpeed,&__pyx_n_s_velocity,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);

    /* "rvo2.pyx":105
 * 
 *     def addAgent(self, tuple pos, neighborDist=None,
 *                  maxNeighbors=None, timeHorizon=None,             # <<<<<<<<<<<<<<
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "rvo2.pyx":106
 *     def addAgent(self, tuple pos, neighborDist=None,
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,             # <<<<<<<<<<<<<<
 *                  velocity=None):
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);

    /* "rvo2.pyx":107
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])
 *         cdef Vector2 c_velocity
 */
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighborDist);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxNeighbors);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizon);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizonObst);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addAgent") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos = ((PyObject*)values[0]);
    __pyx_v_neighborDist = values[1];
    __pyx_v_maxNeighbors = values[2];
    __pyx_v_timeHorizon = values[3];
    __pyx_v_timeHorizonObst = values[4];
    __pyx_v_radius = values[5];
    __pyx_v_maxSpeed = values[6];
    __pyx_v_velocity = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAgent", 0, 1, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.addAgent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), (&PyTuple_Type), 1, "pos", 1))) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_2addAgent(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_pos, __pyx_v_neighborDist, __pyx_v_maxNeighbors, __pyx_v_timeHorizon, __pyx_v_timeHorizonObst, __pyx_v_radius, __pyx_v_maxSpeed, __pyx_v_velocity);

  /* "rvo2.pyx":104
 *                                         maxSpeed, c_velocity)
 * 
 *     def addAgent(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_2addAgent(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_neighborDist, PyObject *__pyx_v_maxNeighbors, PyObject *__pyx_v_timeHorizon, PyObject *__pyx_v_timeHorizonObst, PyObject *__pyx_v_radius, PyObject *__pyx_v_maxSpeed, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_pos;
  RVO::Vector2 __pyx_v_c_velocity;
  size_t __pyx_v_agent_nr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  size_t __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  __Pyx_RefNannySetupContext("addAgent", 0);

  /* "rvo2.pyx":108
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity
 * 
 */
  if (unlikely(__pyx_v_pos == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_pos, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_pos == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_pos, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_v_c_pos = __pyx_t_4;

  /* "rvo2.pyx":111
 *         cdef Vector2 c_velocity
 * 
 *         if neighborDist is not None and velocity is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 */
  __pyx_t_6 = (__pyx_v_neighborDist != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = (__pyx_v_velocity == Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "rvo2.pyx":112
 * 
 *         if neighborDist is not None and velocity is None:
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")             # <<<<<<<<<<<<<<
 * 
 *         if neighborDist is None:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 112, __pyx_L1_error)

    /* "rvo2.pyx":111
 *         cdef Vector2 c_velocity
 * 
 *         if neighborDist is not None and velocity is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 */
  }

  /* "rvo2.pyx":114
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 *         if neighborDist is None:             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgent(c_pos)
 *         else:
 */
  __pyx_t_5 = (__pyx_v_neighborDist == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "rvo2.pyx":115
 * 
 *         if neighborDist is None:
 *             agent_nr = self.thisptr.addAgent(c_pos)             # <<<<<<<<<<<<<<
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 */
    __pyx_v_agent_nr = __pyx_v_self->thisptr->addAgent(__pyx_v_c_pos);

    /* "rvo2.pyx":114
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 *         if neighborDist is None:             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgent(c_pos)
 *         else:
 */
    goto __pyx_L6;
  }

  /* "rvo2.pyx":117
 *             agent_nr = self.thisptr.addAgent(c_pos)
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgent(c_pos, neighborDist,
 *                                              maxNeighbors, timeHorizon,
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    try {
      __pyx_t_4 = RVO::Vector2(__pyx_t_3, __pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_v_c_velocity = __pyx_t_4;

    /* "rvo2.pyx":118
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgent(c_pos, neighborDist,             # <<<<<<<<<<<<<<
 *                                              maxNeighbors, timeHorizon,
 *                                              timeHorizonObst, radius, maxSpeed,
 */
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_neighborDist); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)

    /* "rvo2.pyx":119
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgent(c_pos, neighborDist,
 *                                              maxNeighbors, timeHorizon,             # <<<<<<<<<<<<<<
 *                                              timeHorizonObst, radius, maxSpeed,
 *                                              c_velocity)
 */
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_maxNeighbors); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_timeHorizon); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)

    /* "rvo2.pyx":120
 *             agent_nr = self.thisptr.addAgent(c_pos, neighborDist,
 *                                              maxNeighbors, timeHorizon,
 *                                              timeHorizonObst, radius, maxSpeed,             # <<<<<<<<<<<<<<
 *                                              c_velocity)
 * 
 */
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_timeHorizonObst); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_radius); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_maxSpeed); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)

    /* "rvo2.pyx":118
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgent(c_pos, neighborDist,             # <<<<<<<<<<<<<<
 *                                              maxNeighbors, timeHorizon,
 *                                              timeHorizonObst, radius, maxSpeed,
 */
    __pyx_v_agent_nr = __pyx_v_self->thisptr->addAgent(__pyx_v_c_pos, __pyx_t_2, __pyx_t_8, __pyx_t_3, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_v_c_velocity);
  }
  __pyx_L6:;

  /* "rvo2.pyx":123
 *                                              c_velocity)
 * 
 *         if agent_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 */
  __pyx_t_6 = ((__pyx_v_agent_nr == RVO::RVO_ERROR) != 0);
  if (__pyx_t_6) {

    /* "rvo2.pyx":124
 * 
 *         if agent_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding agent to RVO simulation')             # <<<<<<<<<<<<<<
 * 
 *         return agent_nr
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 124, __pyx_L1_error)

    /* "rvo2.pyx":123
 *                                              c_velocity)
 * 
 *         if agent_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 */
  }

  /* "rvo2.pyx":126
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 *         return agent_nr             # <<<<<<<<<<<<<<
 * 
 *     def addAgentCar(self, tuple pos, neighborDist=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_agent_nr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":104
 *                                         maxSpeed, c_velocity)
 * 
 *     def addAgent(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.addAgent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":128
 *         return agent_nr
 * 
 *     def addAgentCar(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_5addAgentCar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_5addAgentCar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_neighborDist = 0;
  PyObject *__pyx_v_maxNeighbors = 0;
  PyObject *__pyx_v_timeHorizon = 0;
  PyObject *__pyx_v_timeHorizonObst = 0;
  PyObject *__pyx_v_radius = 0;
  PyObject *__pyx_v_maxSpeed = 0;
  PyObject *__pyx_v_velocity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAgentCar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos,&__pyx_n_s_neighborDist,&__pyx_n_s_maxNeighbors,&__pyx_n_s_timeHorizon,&__pyx_n_s_timeHorizonObst,&__pyx_n_s_radius,&__pyx_n_s_maxSpeed,&__pyx_n_s_velocity,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);

    /* "rvo2.pyx":129
 * 
 *     def addAgentCar(self, tuple pos, neighborDist=None,
 *                  maxNeighbors=None, timeHorizon=None,             # <<<<<<<<<<<<<<
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "rvo2.pyx":130
 *     def addAgentCar(self, tuple pos, neighborDist=None,
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,             # <<<<<<<<<<<<<<
 *                  velocity=None):
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);

    /* "rvo2.pyx":131
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])
 *         cdef Vector2 c_velocity
 */
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighborDist);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxNeighbors);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizon);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizonObst);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maxSpeed);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addAgentCar") < 0)) __PYX_ERR(0, 128, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos = ((PyObject*)values[0]);
    __pyx_v_neighborDist = values[1];
    __pyx_v_maxNeighbors = values[2];
    __pyx_v_timeHorizon = values[3];
    __pyx_v_timeHorizonObst = values[4];
    __pyx_v_radius = values[5];
    __pyx_v_maxSpeed = values[6];
    __pyx_v_velocity = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAgentCar", 0, 1, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 128, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.addAgentCar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), (&PyTuple_Type), 1, "pos", 1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_4addAgentCar(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_pos, __pyx_v_neighborDist, __pyx_v_maxNeighbors, __pyx_v_timeHorizon, __pyx_v_timeHorizonObst, __pyx_v_radius, __pyx_v_maxSpeed, __pyx_v_velocity);

  /* "rvo2.pyx":128
 *         return agent_nr
 * 
 *     def addAgentCar(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_4addAgentCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_neighborDist, PyObject *__pyx_v_maxNeighbors, PyObject *__pyx_v_timeHorizon, PyObject *__pyx_v_timeHorizonObst, PyObject *__pyx_v_radius, PyObject *__pyx_v_maxSpeed, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_pos;
  RVO::Vector2 __pyx_v_c_velocity;
  size_t __pyx_v_agent_nr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  size_t __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  __Pyx_RefNannySetupContext("addAgentCar", 0);

  /* "rvo2.pyx":132
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 *                  velocity=None):
 *         cdef Vector2 c_pos = Vector2(pos[0], pos[1])             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity
 * 
 */
  if (unlikely(__pyx_v_pos == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_pos, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_pos == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_pos, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_v_c_pos = __pyx_t_4;

  /* "rvo2.pyx":135
 *         cdef Vector2 c_velocity
 * 
 *         if neighborDist is not None and velocity is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 */
  __pyx_t_6 = (__pyx_v_neighborDist != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = (__pyx_v_velocity == Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "rvo2.pyx":136
 * 
 *         if neighborDist is not None and velocity is None:
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")             # <<<<<<<<<<<<<<
 * 
 *         if neighborDist is None:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 136, __pyx_L1_error)

    /* "rvo2.pyx":135
 *         cdef Vector2 c_velocity
 * 
 *         if neighborDist is not None and velocity is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 */
  }

  /* "rvo2.pyx":138
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 *         if neighborDist is None:             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgentCar(c_pos)
 *         else:
 */
  __pyx_t_5 = (__pyx_v_neighborDist == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "rvo2.pyx":139
 * 
 *         if neighborDist is None:
 *             agent_nr = self.thisptr.addAgentCar(c_pos)             # <<<<<<<<<<<<<<
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 */
    __pyx_v_agent_nr = __pyx_v_self->thisptr->addAgentCar(__pyx_v_c_pos);

    /* "rvo2.pyx":138
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")
 * 
 *         if neighborDist is None:             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgentCar(c_pos)
 *         else:
 */
    goto __pyx_L6;
  }

  /* "rvo2.pyx":141
 *             agent_nr = self.thisptr.addAgentCar(c_pos)
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 *             agent_nr = self.thisptr.addAgentCar(c_pos, neighborDist,
 *                                                 maxNeighbors, timeHorizon,
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    try {
      __pyx_t_4 = RVO::Vector2(__pyx_t_3, __pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 141, __pyx_L1_error)
    }
    __pyx_v_c_velocity = __pyx_t_4;

    /* "rvo2.pyx":142
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgentCar(c_pos, neighborDist,             # <<<<<<<<<<<<<<
 *                                                 maxNeighbors, timeHorizon,
 *                                                 timeHorizonObst, radius, maxSpeed,
 */
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_neighborDist); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)

    /* "rvo2.pyx":143
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgentCar(c_pos, neighborDist,
 *                                                 maxNeighbors, timeHorizon,             # <<<<<<<<<<<<<<
 *                                                 timeHorizonObst, radius, maxSpeed,
 *                                                 c_velocity)
 */
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_maxNeighbors); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_v_timeHorizon); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L1_error)

    /* "rvo2.pyx":144
 *             agent_nr = self.thisptr.addAgentCar(c_pos, neighborDist,
 *                                                 maxNeighbors, timeHorizon,
 *                                                 timeHorizonObst, radius, maxSpeed,             # <<<<<<<<<<<<<<
 *                                                 c_velocity)
 * 
 */
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_timeHorizonObst); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_radius); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_maxSpeed); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)

    /* "rvo2.pyx":142
 *         else:
 *             c_velocity = Vector2(velocity[0], velocity[1])
 *             agent_nr = self.thisptr.addAgentCar(c_pos, neighborDist,             # <<<<<<<<<<<<<<
 *                                                 maxNeighbors, timeHorizon,
 *                                                 timeHorizonObst, radius, maxSpeed,
 */
    __pyx_v_agent_nr = __pyx_v_self->thisptr->addAgentCar(__pyx_v_c_pos, __pyx_t_2, __pyx_t_8, __pyx_t_3, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_v_c_velocity);
  }
  __pyx_L6:;

  /* "rvo2.pyx":147
 *                                                 c_velocity)
 * 
 *         if agent_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 */
  __pyx_t_6 = ((__pyx_v_agent_nr == RVO::RVO_ERROR) != 0);
  if (__pyx_t_6) {

    /* "rvo2.pyx":148
 * 
 *         if agent_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding agent to RVO simulation')             # <<<<<<<<<<<<<<
 * 
 *         return agent_nr
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "rvo2.pyx":147
 *                                                 c_velocity)
 * 
 *         if agent_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 */
  }

  /* "rvo2.pyx":150
 *             raise RuntimeError('Error adding agent to RVO simulation')
 * 
 *         return agent_nr             # <<<<<<<<<<<<<<
 * 
 *     def setCarLookupTable(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_agent_nr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":128
 *         return agent_nr
 * 
 *     def addAgentCar(self, tuple pos, neighborDist=None,             # <<<<<<<<<<<<<<
 *                  maxNeighbors=None, timeHorizon=None,
 *                  timeHorizonObst=None, radius=None, maxSpeed=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.addAgentCar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":152
 *         return agent_nr
 * 
 *     def setCarLookupTable(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCarLookupTable()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_7setCarLookupTable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_7setCarLookupTable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCarLookupTable (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_6setCarLookupTable(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_6setCarLookupTable(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCarLookupTable", 0);

  /* "rvo2.pyx":153
 * 
 *     def setCarLookupTable(self):
 *         self.thisptr.setCarLookupTable()             # <<<<<<<<<<<<<<
 * 
 *     def addObstacle(self, list vertices):
 */
  __pyx_v_self->thisptr->setCarLookupTable();

  /* "rvo2.pyx":152
 *         return agent_nr
 * 
 *     def setCarLookupTable(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCarLookupTable()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":155
 *         self.thisptr.setCarLookupTable()
 * 
 *     def addObstacle(self, list vertices):             # <<<<<<<<<<<<<<
 *         cdef vector[Vector2] c_vertices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_9addObstacle(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_9addObstacle(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addObstacle (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vertices), (&PyList_Type), 1, "vertices", 1))) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_8addObstacle(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((PyObject*)__pyx_v_vertices));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_8addObstacle(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_vertices) {
  std::vector<RVO::Vector2>  __pyx_v_c_vertices;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  size_t __pyx_v_obstacle_nr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  float __pyx_t_8;
  float __pyx_t_9;
  RVO::Vector2 __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("addObstacle", 0);

  /* "rvo2.pyx":158
 *         cdef vector[Vector2] c_vertices
 * 
 *         for x, y in vertices:             # <<<<<<<<<<<<<<
 *             c_vertices.push_back(Vector2(x, y))
 * 
 */
  if (unlikely(__pyx_v_vertices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 158, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 158, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 158, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "rvo2.pyx":159
 * 
 *         for x, y in vertices:
 *             c_vertices.push_back(Vector2(x, y))             # <<<<<<<<<<<<<<
 * 
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)
 */
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_v_x); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_y); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
    try {
      __pyx_t_10 = RVO::Vector2(__pyx_t_8, __pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 159, __pyx_L1_error)
    }
    try {
      __pyx_v_c_vertices.push_back(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 159, __pyx_L1_error)
    }

    /* "rvo2.pyx":158
 *         cdef vector[Vector2] c_vertices
 * 
 *         for x, y in vertices:             # <<<<<<<<<<<<<<
 *             c_vertices.push_back(Vector2(x, y))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rvo2.pyx":161
 *             c_vertices.push_back(Vector2(x, y))
 * 
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)             # <<<<<<<<<<<<<<
 *         if obstacle_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 */
  __pyx_v_obstacle_nr = __pyx_v_self->thisptr->addObstacle(__pyx_v_c_vertices);

  /* "rvo2.pyx":162
 * 
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)
 *         if obstacle_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 *         return obstacle_nr
 */
  __pyx_t_11 = ((__pyx_v_obstacle_nr == RVO::RVO_ERROR) != 0);
  if (__pyx_t_11) {

    /* "rvo2.pyx":163
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)
 *         if obstacle_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding obstacle to RVO simulation')             # <<<<<<<<<<<<<<
 *         return obstacle_nr
 *     def clearObstacle(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 163, __pyx_L1_error)

    /* "rvo2.pyx":162
 * 
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)
 *         if obstacle_nr == RVO_ERROR:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 *         return obstacle_nr
 */
  }

  /* "rvo2.pyx":164
 *         if obstacle_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 *         return obstacle_nr             # <<<<<<<<<<<<<<
 *     def clearObstacle(self):
 *         self.thisptr.clearObstacle()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_obstacle_nr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":155
 *         self.thisptr.setCarLookupTable()
 * 
 *     def addObstacle(self, list vertices):             # <<<<<<<<<<<<<<
 *         cdef vector[Vector2] c_vertices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.addObstacle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":165
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 *         return obstacle_nr
 *     def clearObstacle(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clearObstacle()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_11clearObstacle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_11clearObstacle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearObstacle (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_10clearObstacle(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_10clearObstacle(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearObstacle", 0);

  /* "rvo2.pyx":166
 *         return obstacle_nr
 *     def clearObstacle(self):
 *         self.thisptr.clearObstacle()             # <<<<<<<<<<<<<<
 * 
 *     def doStep(self):
 */
  __pyx_v_self->thisptr->clearObstacle();

  /* "rvo2.pyx":165
 *             raise RuntimeError('Error adding obstacle to RVO simulation')
 *         return obstacle_nr
 *     def clearObstacle(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clearObstacle()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":168
 *         self.thisptr.clearObstacle()
 * 
 *     def doStep(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.doStep()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_13doStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_13doStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doStep (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_12doStep(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_12doStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doStep", 0);

  /* "rvo2.pyx":169
 * 
 *     def doStep(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.doStep()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rvo2.pyx":170
 *     def doStep(self):
 *         with nogil:
 *             self.thisptr.doStep()             # <<<<<<<<<<<<<<
 * 
 *     def computeAgents(self):
 */
        __pyx_v_self->thisptr->doStep();
      }

      /* "rvo2.pyx":169
 * 
 *     def doStep(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.doStep()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "rvo2.pyx":168
 *         self.thisptr.clearObstacle()
 * 
 *     def doStep(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.doStep()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":172
 *             self.thisptr.doStep()
 * 
 *     def computeAgents(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.computeAgents()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_15computeAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_15computeAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAgents (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_14computeAgents(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_14computeAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeAgents", 0);

  /* "rvo2.pyx":173
 * 
 *     def computeAgents(self):
 *         self.thisptr.computeAgents()             # <<<<<<<<<<<<<<
 * 
 *     def updateAgents(self):
 */
  __pyx_v_self->thisptr->computeAgents();

  /* "rvo2.pyx":172
 *             self.thisptr.doStep()
 * 
 *     def computeAgents(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.computeAgents()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":175
 *         self.thisptr.computeAgents()
 * 
 *     def updateAgents(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.updateAgents()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_17updateAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_17updateAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateAgents (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_16updateAgents(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_16updateAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateAgents", 0);

  /* "rvo2.pyx":176
 * 
 *     def updateAgents(self):
 *         self.thisptr.updateAgents()             # <<<<<<<<<<<<<<
 * 
 *     def doStepCar(self):
 */
  __pyx_v_self->thisptr->updateAgents();

  /* "rvo2.pyx":175
 *         self.thisptr.computeAgents()
 * 
 *     def updateAgents(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.updateAgents()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":178
 *         self.thisptr.updateAgents()
 * 
 *     def doStepCar(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.doStepCar()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_19doStepCar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_19doStepCar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doStepCar (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_18doStepCar(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_18doStepCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doStepCar", 0);

  /* "rvo2.pyx":179
 * 
 *     def doStepCar(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.doStepCar()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rvo2.pyx":180
 *     def doStepCar(self):
 *         with nogil:
 *             self.thisptr.doStepCar()             # <<<<<<<<<<<<<<
 * 
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):
 */
        __pyx_v_self->thisptr->doStepCar();
      }

      /* "rvo2.pyx":179
 * 
 *     def doStepCar(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.doStepCar()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "rvo2.pyx":178
 *         self.thisptr.updateAgents()
 * 
 *     def doStepCar(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.doStepCar()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":182
 *             self.thisptr.doStepCar()
 * 
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_21getAgentAgentNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_21getAgentAgentNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  size_t __pyx_v_neighbor_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentAgentNeighbor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_neighbor_no,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighbor_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAgentAgentNeighbor", 1, 2, 2, 1); __PYX_ERR(0, 182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAgentAgentNeighbor") < 0)) __PYX_ERR(0, 182, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L3_error)
    __pyx_v_neighbor_no = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_neighbor_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAgentAgentNeighbor", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentAgentNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_20getAgentAgentNeighbor(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_neighbor_no);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_20getAgentAgentNeighbor(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_neighbor_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentAgentNeighbor", 0);

  /* "rvo2.pyx":183
 * 
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)             # <<<<<<<<<<<<<<
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentAgentNeighbor(__pyx_v_agent_no, __pyx_v_neighbor_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":182
 *             self.thisptr.doStepCar()
 * 
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentAgentNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":184
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)
 *     def getAgentMaxNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 *     def getAgentMaxSpeed(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_23getAgentMaxNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_23getAgentMaxNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentMaxNeighbors (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentMaxNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_22getAgentMaxNeighbors(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_22getAgentMaxNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentMaxNeighbors", 0);

  /* "rvo2.pyx":185
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentMaxSpeed(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentMaxNeighbors(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":184
 *     def getAgentAgentNeighbor(self, size_t agent_no, size_t neighbor_no):
 *         return self.thisptr.getAgentAgentNeighbor(agent_no, neighbor_no)
 *     def getAgentMaxNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 *     def getAgentMaxSpeed(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentMaxNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":186
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 *     def getAgentMaxSpeed(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 *     def getAgentNeighborDist(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_25getAgentMaxSpeed(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_25getAgentMaxSpeed(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentMaxSpeed (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentMaxSpeed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_24getAgentMaxSpeed(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_24getAgentMaxSpeed(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentMaxSpeed", 0);

  /* "rvo2.pyx":187
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 *     def getAgentMaxSpeed(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxSpeed(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentNeighborDist(self, size_t agent_no):
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentMaxSpeed(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":186
 *     def getAgentMaxNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxNeighbors(agent_no)
 *     def getAgentMaxSpeed(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 *     def getAgentNeighborDist(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentMaxSpeed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":188
 *     def getAgentMaxSpeed(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 *     def getAgentNeighborDist(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_27getAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_27getAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentNeighborDist (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNeighborDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_26getAgentNeighborDist(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_26getAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentNeighborDist", 0);

  /* "rvo2.pyx":189
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 *     def getAgentNeighborDist(self, size_t agent_no):
 *         return self.thisptr.getAgentNeighborDist(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentNeighborDist(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":188
 *     def getAgentMaxSpeed(self, size_t agent_no):
 *         return self.thisptr.getAgentMaxSpeed(agent_no)
 *     def getAgentNeighborDist(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNeighborDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":190
 *     def getAgentNeighborDist(self, size_t agent_no):
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_29getAgentNumAgentNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_29getAgentNumAgentNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentNumAgentNeighbors (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumAgentNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_28getAgentNumAgentNeighbors(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_28getAgentNumAgentNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentNumAgentNeighbors", 0);

  /* "rvo2.pyx":191
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentNumAgentNeighbors(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":190
 *     def getAgentNeighborDist(self, size_t agent_no):
 *         return self.thisptr.getAgentNeighborDist(agent_no)
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumAgentNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":192
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 *     def getAgentNumORCALines(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_31getAgentNumObstacleNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_31getAgentNumObstacleNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentNumObstacleNeighbors (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumObstacleNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_30getAgentNumObstacleNeighbors(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_30getAgentNumObstacleNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentNumObstacleNeighbors", 0);

  /* "rvo2.pyx":193
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentNumORCALines(self, size_t agent_no):
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentNumObstacleNeighbors(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":192
 *     def getAgentNumAgentNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumAgentNeighbors(agent_no)
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 *     def getAgentNumORCALines(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumObstacleNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":194
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 *     def getAgentNumORCALines(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_33getAgentNumORCALines(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_33getAgentNumORCALines(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentNumORCALines (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumORCALines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_32getAgentNumORCALines(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_32getAgentNumORCALines(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentNumORCALines", 0);

  /* "rvo2.pyx":195
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 *     def getAgentNumORCALines(self, size_t agent_no):
 *         return self.thisptr.getAgentNumORCALines(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentNumORCALines(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":194
 *     def getAgentNumObstacleNeighbors(self, size_t agent_no):
 *         return self.thisptr.getAgentNumObstacleNeighbors(agent_no)
 *     def getAgentNumORCALines(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentNumORCALines", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":196
 *     def getAgentNumORCALines(self, size_t agent_no):
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_35getAgentObstacleNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_35getAgentObstacleNeighbor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  size_t __pyx_v_obstacle_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentObstacleNeighbor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_obstacle_no,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obstacle_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAgentObstacleNeighbor", 1, 2, 2, 1); __PYX_ERR(0, 196, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAgentObstacleNeighbor") < 0)) __PYX_ERR(0, 196, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L3_error)
    __pyx_v_obstacle_no = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_obstacle_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAgentObstacleNeighbor", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentObstacleNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_34getAgentObstacleNeighbor(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_obstacle_no);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_34getAgentObstacleNeighbor(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_obstacle_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentObstacleNeighbor", 0);

  /* "rvo2.pyx":197
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)             # <<<<<<<<<<<<<<
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getAgentObstacleNeighbor(__pyx_v_agent_no, __pyx_v_obstacle_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":196
 *     def getAgentNumORCALines(self, size_t agent_no):
 *         return self.thisptr.getAgentNumORCALines(agent_no)
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentObstacleNeighbor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":198
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):             # <<<<<<<<<<<<<<
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_37getAgentORCALine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_37getAgentORCALine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  size_t __pyx_v_line_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentORCALine (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_line_no,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_line_no)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAgentORCALine", 1, 2, 2, 1); __PYX_ERR(0, 198, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAgentORCALine") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L3_error)
    __pyx_v_line_no = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_line_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAgentORCALine", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentORCALine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_36getAgentORCALine(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_line_no);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_36getAgentORCALine(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_line_no) {
  RVO::Line __pyx_v_line;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getAgentORCALine", 0);

  /* "rvo2.pyx":199
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)             # <<<<<<<<<<<<<<
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 *     def getAgentPosition(self, size_t agent_no):
 */
  __pyx_v_line = __pyx_v_self->thisptr->getAgentORCALine(__pyx_v_agent_no, __pyx_v_line_no);

  /* "rvo2.pyx":200
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()             # <<<<<<<<<<<<<<
 *     def getAgentPosition(self, size_t agent_no):
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_line.point.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_line.point.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_line.direction.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_line.direction.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":198
 *     def getAgentObstacleNeighbor(self, size_t agent_no, size_t obstacle_no):
 *         return self.thisptr.getAgentObstacleNeighbor(agent_no, obstacle_no)
 *     def getAgentORCALine(self, size_t agent_no, size_t line_no):             # <<<<<<<<<<<<<<
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentORCALine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":201
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 *     def getAgentPosition(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 *         return pos.x(), pos.y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_39getAgentPosition(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_39getAgentPosition(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentPosition (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_38getAgentPosition(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_38getAgentPosition(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  RVO::Vector2 __pyx_v_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getAgentPosition", 0);

  /* "rvo2.pyx":202
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 *     def getAgentPosition(self, size_t agent_no):
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)             # <<<<<<<<<<<<<<
 *         return pos.x(), pos.y()
 *     def getAgentPrefVelocity(self, size_t agent_no):
 */
  __pyx_v_pos = __pyx_v_self->thisptr->getAgentPosition(__pyx_v_agent_no);

  /* "rvo2.pyx":203
 *     def getAgentPosition(self, size_t agent_no):
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 *         return pos.x(), pos.y()             # <<<<<<<<<<<<<<
 *     def getAgentPrefVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_pos.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pos.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":201
 *         cdef Line line = self.thisptr.getAgentORCALine(agent_no, line_no)
 *         return line.point.x(), line.point.y(), line.direction.x(), line.direction.y()
 *     def getAgentPosition(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 *         return pos.x(), pos.y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":204
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 *         return pos.x(), pos.y()
 *     def getAgentPrefVelocity(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_41getAgentPrefVelocity(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_41getAgentPrefVelocity(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentPrefVelocity (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentPrefVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_40getAgentPrefVelocity(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_40getAgentPrefVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  RVO::Vector2 __pyx_v_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getAgentPrefVelocity", 0);

  /* "rvo2.pyx":205
 *         return pos.x(), pos.y()
 *     def getAgentPrefVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)             # <<<<<<<<<<<<<<
 *         return velocity.x(), velocity.y()
 *     def getAgentRadius(self, size_t agent_no):
 */
  __pyx_v_velocity = __pyx_v_self->thisptr->getAgentPrefVelocity(__pyx_v_agent_no);

  /* "rvo2.pyx":206
 *     def getAgentPrefVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 *         return velocity.x(), velocity.y()             # <<<<<<<<<<<<<<
 *     def getAgentRadius(self, size_t agent_no):
 *         return self.thisptr.getAgentRadius(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_velocity.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_velocity.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":204
 *         cdef Vector2 pos = self.thisptr.getAgentPosition(agent_no)
 *         return pos.x(), pos.y()
 *     def getAgentPrefVelocity(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentPrefVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":207
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 *     def getAgentRadius(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentRadius(agent_no)
 *     def getAgentTimeHorizon(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_43getAgentRadius(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_43getAgentRadius(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentRadius (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_42getAgentRadius(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_42getAgentRadius(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentRadius", 0);

  /* "rvo2.pyx":208
 *         return velocity.x(), velocity.y()
 *     def getAgentRadius(self, size_t agent_no):
 *         return self.thisptr.getAgentRadius(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentTimeHorizon(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentRadius(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":207
 *         cdef Vector2 velocity = self.thisptr.getAgentPrefVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 *     def getAgentRadius(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentRadius(agent_no)
 *     def getAgentTimeHorizon(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":209
 *     def getAgentRadius(self, size_t agent_no):
 *         return self.thisptr.getAgentRadius(agent_no)
 *     def getAgentTimeHorizon(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_45getAgentTimeHorizon(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_45getAgentTimeHorizon(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentTimeHorizon (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentTimeHorizon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_44getAgentTimeHorizon(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_44getAgentTimeHorizon(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentTimeHorizon", 0);

  /* "rvo2.pyx":210
 *         return self.thisptr.getAgentRadius(agent_no)
 *     def getAgentTimeHorizon(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizon(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentTimeHorizon(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":209
 *     def getAgentRadius(self, size_t agent_no):
 *         return self.thisptr.getAgentRadius(agent_no)
 *     def getAgentTimeHorizon(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentTimeHorizon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":211
 *     def getAgentTimeHorizon(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 *     def getAgentTimeHorizonObst(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 *     def getAgentVelocity(self, size_t agent_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_47getAgentTimeHorizonObst(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_47getAgentTimeHorizonObst(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentTimeHorizonObst (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentTimeHorizonObst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_46getAgentTimeHorizonObst(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_46getAgentTimeHorizonObst(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentTimeHorizonObst", 0);

  /* "rvo2.pyx":212
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)             # <<<<<<<<<<<<<<
 *     def getAgentVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentTimeHorizonObst(__pyx_v_agent_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":211
 *     def getAgentTimeHorizon(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizon(agent_no)
 *     def getAgentTimeHorizonObst(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 *     def getAgentVelocity(self, size_t agent_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentTimeHorizonObst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":213
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 *     def getAgentVelocity(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_49getAgentVelocity(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_49getAgentVelocity(PyObject *__pyx_v_self, PyObject *__pyx_arg_agent_no) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentVelocity (wrapper)", 0);
  assert(__pyx_arg_agent_no); {
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(__pyx_arg_agent_no); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_48getAgentVelocity(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agent_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_48getAgentVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no) {
  RVO::Vector2 __pyx_v_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getAgentVelocity", 0);

  /* "rvo2.pyx":214
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 *     def getAgentVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)             # <<<<<<<<<<<<<<
 *         return velocity.x(), velocity.y()
 *     def getGlobalTime(self):
 */
  __pyx_v_velocity = __pyx_v_self->thisptr->getAgentVelocity(__pyx_v_agent_no);

  /* "rvo2.pyx":215
 *     def getAgentVelocity(self, size_t agent_no):
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 *         return velocity.x(), velocity.y()             # <<<<<<<<<<<<<<
 *     def getGlobalTime(self):
 *         return self.thisptr.getGlobalTime()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_velocity.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_velocity.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":213
 *     def getAgentTimeHorizonObst(self, size_t agent_no):
 *         return self.thisptr.getAgentTimeHorizonObst(agent_no)
 *     def getAgentVelocity(self, size_t agent_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":216
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 *     def getGlobalTime(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getGlobalTime()
 *     def getNumAgents(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_51getGlobalTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_51getGlobalTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGlobalTime (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_50getGlobalTime(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_50getGlobalTime(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getGlobalTime", 0);

  /* "rvo2.pyx":217
 *         return velocity.x(), velocity.y()
 *     def getGlobalTime(self):
 *         return self.thisptr.getGlobalTime()             # <<<<<<<<<<<<<<
 *     def getNumAgents(self):
 *         return self.thisptr.getNumAgents()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getGlobalTime()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":216
 *         cdef Vector2 velocity = self.thisptr.getAgentVelocity(agent_no)
 *         return velocity.x(), velocity.y()
 *     def getGlobalTime(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getGlobalTime()
 *     def getNumAgents(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getGlobalTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":218
 *     def getGlobalTime(self):
 *         return self.thisptr.getGlobalTime()
 *     def getNumAgents(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumAgents()
 *     def getNumObstacleVertices(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_53getNumAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_53getNumAgents(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumAgents (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_52getNumAgents(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_52getNumAgents(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumAgents", 0);

  /* "rvo2.pyx":219
 *         return self.thisptr.getGlobalTime()
 *     def getNumAgents(self):
 *         return self.thisptr.getNumAgents()             # <<<<<<<<<<<<<<
 *     def getNumObstacleVertices(self):
 *         return self.thisptr.getNumObstacleVertices()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getNumAgents()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":218
 *     def getGlobalTime(self):
 *         return self.thisptr.getGlobalTime()
 *     def getNumAgents(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumAgents()
 *     def getNumObstacleVertices(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getNumAgents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":220
 *     def getNumAgents(self):
 *         return self.thisptr.getNumAgents()
 *     def getNumObstacleVertices(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumObstacleVertices()
 *     def getObstacleVertex(self, size_t vertex_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_55getNumObstacleVertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_55getNumObstacleVertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumObstacleVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_54getNumObstacleVertices(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_54getNumObstacleVertices(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumObstacleVertices", 0);

  /* "rvo2.pyx":221
 *         return self.thisptr.getNumAgents()
 *     def getNumObstacleVertices(self):
 *         return self.thisptr.getNumObstacleVertices()             # <<<<<<<<<<<<<<
 *     def getObstacleVertex(self, size_t vertex_no):
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getNumObstacleVertices()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":220
 *     def getNumAgents(self):
 *         return self.thisptr.getNumAgents()
 *     def getNumObstacleVertices(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumObstacleVertices()
 *     def getObstacleVertex(self, size_t vertex_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getNumObstacleVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":222
 *     def getNumObstacleVertices(self):
 *         return self.thisptr.getNumObstacleVertices()
 *     def getObstacleVertex(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 *         return pos.x(), pos.y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_57getObstacleVertex(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_57getObstacleVertex(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no) {
  size_t __pyx_v_vertex_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getObstacleVertex (wrapper)", 0);
  assert(__pyx_arg_vertex_no); {
    __pyx_v_vertex_no = __Pyx_PyInt_As_size_t(__pyx_arg_vertex_no); if (unlikely((__pyx_v_vertex_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getObstacleVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_56getObstacleVertex(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_vertex_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_56getObstacleVertex(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no) {
  RVO::Vector2 __pyx_v_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getObstacleVertex", 0);

  /* "rvo2.pyx":223
 *         return self.thisptr.getNumObstacleVertices()
 *     def getObstacleVertex(self, size_t vertex_no):
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)             # <<<<<<<<<<<<<<
 *         return pos.x(), pos.y()
 *     def getNextObstacleVertexNo(self, size_t vertex_no):
 */
  __pyx_v_pos = __pyx_v_self->thisptr->getObstacleVertex(__pyx_v_vertex_no);

  /* "rvo2.pyx":224
 *     def getObstacleVertex(self, size_t vertex_no):
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 *         return pos.x(), pos.y()             # <<<<<<<<<<<<<<
 *     def getNextObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_pos.x()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pos.y()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":222
 *     def getNumObstacleVertices(self):
 *         return self.thisptr.getNumObstacleVertices()
 *     def getObstacleVertex(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 *         return pos.x(), pos.y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getObstacleVertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":225
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 *         return pos.x(), pos.y()
 *     def getNextObstacleVertexNo(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_59getNextObstacleVertexNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_59getNextObstacleVertexNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no) {
  size_t __pyx_v_vertex_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNextObstacleVertexNo (wrapper)", 0);
  assert(__pyx_arg_vertex_no); {
    __pyx_v_vertex_no = __Pyx_PyInt_As_size_t(__pyx_arg_vertex_no); if (unlikely((__pyx_v_vertex_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getNextObstacleVertexNo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_58getNextObstacleVertexNo(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_vertex_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_58getNextObstacleVertexNo(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNextObstacleVertexNo", 0);

  /* "rvo2.pyx":226
 *         return pos.x(), pos.y()
 *     def getNextObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)             # <<<<<<<<<<<<<<
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getNextObstacleVertexNo(__pyx_v_vertex_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":225
 *         cdef Vector2 pos = self.thisptr.getObstacleVertex(vertex_no)
 *         return pos.x(), pos.y()
 *     def getNextObstacleVertexNo(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getNextObstacleVertexNo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":227
 *     def getNextObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 *     def getTimeStep(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_61getPrevObstacleVertexNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_61getPrevObstacleVertexNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex_no) {
  size_t __pyx_v_vertex_no;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPrevObstacleVertexNo (wrapper)", 0);
  assert(__pyx_arg_vertex_no); {
    __pyx_v_vertex_no = __Pyx_PyInt_As_size_t(__pyx_arg_vertex_no); if (unlikely((__pyx_v_vertex_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getPrevObstacleVertexNo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_60getPrevObstacleVertexNo(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_vertex_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_60getPrevObstacleVertexNo(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_vertex_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPrevObstacleVertexNo", 0);

  /* "rvo2.pyx":228
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)             # <<<<<<<<<<<<<<
 *     def getTimeStep(self):
 *         return self.thisptr.getTimeStep()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getPrevObstacleVertexNo(__pyx_v_vertex_no)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":227
 *     def getNextObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getNextObstacleVertexNo(vertex_no)
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 *     def getTimeStep(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getPrevObstacleVertexNo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":229
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 *     def getTimeStep(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTimeStep()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_63getTimeStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_63getTimeStep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimeStep (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_62getTimeStep(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_62getTimeStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getTimeStep", 0);

  /* "rvo2.pyx":230
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 *     def getTimeStep(self):
 *         return self.thisptr.getTimeStep()             # <<<<<<<<<<<<<<
 * 
 *     def processObstacles(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getTimeStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":229
 *     def getPrevObstacleVertexNo(self, size_t vertex_no):
 *         return self.thisptr.getPrevObstacleVertexNo(vertex_no)
 *     def getTimeStep(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTimeStep()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getTimeStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":232
 *         return self.thisptr.getTimeStep()
 * 
 *     def processObstacles(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.processObstacles()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_65processObstacles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_65processObstacles(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processObstacles (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_64processObstacles(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_64processObstacles(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processObstacles", 0);

  /* "rvo2.pyx":233
 * 
 *     def processObstacles(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.processObstacles()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rvo2.pyx":234
 *     def processObstacles(self):
 *         with nogil:
 *             self.thisptr.processObstacles()             # <<<<<<<<<<<<<<
 * 
 *     def queryVisibility(self, tuple point1, tuple point2, float radius=0.0):
 */
        __pyx_v_self->thisptr->processObstacles();
      }

      /* "rvo2.pyx":233
 * 
 *     def processObstacles(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.thisptr.processObstacles()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "rvo2.pyx":232
 *         return self.thisptr.getTimeStep()
 * 
 *     def processObstacles(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.thisptr.processObstacles()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":236
 *             self.thisptr.processObstacles()
 * 
 *     def queryVisibility(self, tuple point1, tuple point2, float radius=0.0):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_point1 = Vector2(point1[0], point1[1])
 *         cdef Vector2 c_point2 = Vector2(point2[0], point2[1])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_67queryVisibility(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_67queryVisibility(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_point1 = 0;
  PyObject *__pyx_v_point2 = 0;
  float __pyx_v_radius;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("queryVisibility (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point1,&__pyx_n_s_point2,&__pyx_n_s_radius,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_point1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_point2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("queryVisibility", 0, 2, 3, 1); __PYX_ERR(0, 236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "queryVisibility") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point1 = ((PyObject*)values[0]);
    __pyx_v_point2 = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_radius = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L3_error)
    } else {
      __pyx_v_radius = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("queryVisibility", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.queryVisibility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point1), (&PyTuple_Type), 1, "point1", 1))) __PYX_ERR(0, 236, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point2), (&PyTuple_Type), 1, "point2", 1))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_66queryVisibility(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_point1, __pyx_v_point2, __pyx_v_radius);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_66queryVisibility(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, PyObject *__pyx_v_point1, PyObject *__pyx_v_point2, float __pyx_v_radius) {
  RVO::Vector2 __pyx_v_c_point1;
  RVO::Vector2 __pyx_v_c_point2;
  bool __pyx_v_visible;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("queryVisibility", 0);

  /* "rvo2.pyx":237
 * 
 *     def queryVisibility(self, tuple point1, tuple point2, float radius=0.0):
 *         cdef Vector2 c_point1 = Vector2(point1[0], point1[1])             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_point2 = Vector2(point2[0], point2[1])
 *         cdef bool visible
 */
  if (unlikely(__pyx_v_point1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_point1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_point1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_point1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_v_c_point1 = __pyx_t_4;

  /* "rvo2.pyx":238
 *     def queryVisibility(self, tuple point1, tuple point2, float radius=0.0):
 *         cdef Vector2 c_point1 = Vector2(point1[0], point1[1])
 *         cdef Vector2 c_point2 = Vector2(point2[0], point2[1])             # <<<<<<<<<<<<<<
 *         cdef bool visible
 * 
 */
  if (unlikely(__pyx_v_point2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_point2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_point2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_point2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_3, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_v_c_point2 = __pyx_t_4;

  /* "rvo2.pyx":241
 *         cdef bool visible
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             visible = self.thisptr.queryVisibility(c_point1, c_point2, radius)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "rvo2.pyx":242
 * 
 *         with nogil:
 *             visible = self.thisptr.queryVisibility(c_point1, c_point2, radius)             # <<<<<<<<<<<<<<
 * 
 *         return visible
 */
        __pyx_v_visible = __pyx_v_self->thisptr->queryVisibility(__pyx_v_c_point1, __pyx_v_c_point2, __pyx_v_radius);
      }

      /* "rvo2.pyx":241
 *         cdef bool visible
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             visible = self.thisptr.queryVisibility(c_point1, c_point2, radius)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "rvo2.pyx":244
 *             visible = self.thisptr.queryVisibility(c_point1, c_point2, radius)
 * 
 *         return visible             # <<<<<<<<<<<<<<
 * 
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_visible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":236
 *             self.thisptr.processObstacles()
 * 
 *     def queryVisibility(self, tuple point1, tuple point2, float radius=0.0):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_point1 = Vector2(point1[0], point1[1])
 *         cdef Vector2 c_point2 = Vector2(point2[0], point2[1])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.queryVisibility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":246
 *         return visible
 * 
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,             # <<<<<<<<<<<<<<
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_69setAgentDefaults(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_69setAgentDefaults(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_neighbor_dist;
  size_t __pyx_v_max_neighbors;
  float __pyx_v_time_horizon;
  float __pyx_v_time_horizon_obst;
  float __pyx_v_radius;
  float __pyx_v_max_speed;
  PyObject *__pyx_v_velocity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentDefaults (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_neighbor_dist,&__pyx_n_s_max_neighbors,&__pyx_n_s_time_horizon,&__pyx_n_s_time_horizon_obst,&__pyx_n_s_radius,&__pyx_n_s_max_speed,&__pyx_n_s_velocity,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "rvo2.pyx":248
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentDefaults(neighbor_dist, max_neighbors, time_horizon,
 */
    values[6] = ((PyObject*)__pyx_tuple__7);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighbor_dist)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_neighbors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, 1); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_horizon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, 2); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_horizon_obst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, 3); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, 4); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, 5); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentDefaults") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_neighbor_dist = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_neighbor_dist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
    __pyx_v_max_neighbors = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_max_neighbors == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
    __pyx_v_time_horizon = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_time_horizon == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
    __pyx_v_time_horizon_obst = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_time_horizon_obst == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
    __pyx_v_max_speed = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_max_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
    __pyx_v_velocity = ((PyObject*)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentDefaults", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentDefaults", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), (&PyTuple_Type), 1, "velocity", 1))) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_68setAgentDefaults(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_neighbor_dist, __pyx_v_max_neighbors, __pyx_v_time_horizon, __pyx_v_time_horizon_obst, __pyx_v_radius, __pyx_v_max_speed, __pyx_v_velocity);

  /* "rvo2.pyx":246
 *         return visible
 * 
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,             # <<<<<<<<<<<<<<
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_68setAgentDefaults(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_neighbor_dist, size_t __pyx_v_max_neighbors, float __pyx_v_time_horizon, float __pyx_v_time_horizon_obst, float __pyx_v_radius, float __pyx_v_max_speed, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("setAgentDefaults", 0);

  /* "rvo2.pyx":249
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentDefaults(neighbor_dist, max_neighbors, time_horizon,
 *                                       time_horizon_obst, radius, max_speed, c_velocity)
 */
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __pyx_v_c_velocity = __pyx_t_4;

  /* "rvo2.pyx":250
 *                          tuple velocity=(0, 0)):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentDefaults(neighbor_dist, max_neighbors, time_horizon,             # <<<<<<<<<<<<<<
 *                                       time_horizon_obst, radius, max_speed, c_velocity)
 * 
 */
  __pyx_v_self->thisptr->setAgentDefaults(__pyx_v_neighbor_dist, __pyx_v_max_neighbors, __pyx_v_time_horizon, __pyx_v_time_horizon_obst, __pyx_v_radius, __pyx_v_max_speed, __pyx_v_c_velocity);

  /* "rvo2.pyx":246
 *         return visible
 * 
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,             # <<<<<<<<<<<<<<
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentDefaults", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":253
 *                                       time_horizon_obst, radius, max_speed, c_velocity)
 * 
 *     def setAgentMaxNeighbors(self, size_t agent_no, size_t max_neighbors):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_71setAgentMaxNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_71setAgentMaxNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  size_t __pyx_v_max_neighbors;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentMaxNeighbors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_max_neighbors,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_neighbors)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentMaxNeighbors", 1, 2, 2, 1); __PYX_ERR(0, 253, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentMaxNeighbors") < 0)) __PYX_ERR(0, 253, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
    __pyx_v_max_neighbors = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_max_neighbors == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentMaxNeighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentMaxNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_70setAgentMaxNeighbors(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_max_neighbors);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_70setAgentMaxNeighbors(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, size_t __pyx_v_max_neighbors) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentMaxNeighbors", 0);

  /* "rvo2.pyx":254
 * 
 *     def setAgentMaxNeighbors(self, size_t agent_no, size_t max_neighbors):
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)             # <<<<<<<<<<<<<<
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 */
  __pyx_v_self->thisptr->setAgentMaxNeighbors(__pyx_v_agent_no, __pyx_v_max_neighbors);

  /* "rvo2.pyx":253
 *                                       time_horizon_obst, radius, max_speed, c_velocity)
 * 
 *     def setAgentMaxNeighbors(self, size_t agent_no, size_t max_neighbors):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":255
 *     def setAgentMaxNeighbors(self, size_t agent_no, size_t max_neighbors):
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_73setAgentMaxSpeed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_73setAgentMaxSpeed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_max_speed;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentMaxSpeed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_max_speed,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_speed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentMaxSpeed", 1, 2, 2, 1); __PYX_ERR(0, 255, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentMaxSpeed") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
    __pyx_v_max_speed = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_max_speed == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentMaxSpeed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentMaxSpeed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_72setAgentMaxSpeed(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_max_speed);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_72setAgentMaxSpeed(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_max_speed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentMaxSpeed", 0);

  /* "rvo2.pyx":256
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)             # <<<<<<<<<<<<<<
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 */
  __pyx_v_self->thisptr->setAgentMaxSpeed(__pyx_v_agent_no, __pyx_v_max_speed);

  /* "rvo2.pyx":255
 *     def setAgentMaxNeighbors(self, size_t agent_no, size_t max_neighbors):
 *         self.thisptr.setAgentMaxNeighbors(agent_no, max_neighbors)
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":257
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_75setAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_75setAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_neighbor_dist;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentNeighborDist (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_neighbor_dist,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighbor_dist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentNeighborDist", 1, 2, 2, 1); __PYX_ERR(0, 257, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentNeighborDist") < 0)) __PYX_ERR(0, 257, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L3_error)
    __pyx_v_neighbor_dist = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_neighbor_dist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentNeighborDist", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 257, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentNeighborDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_74setAgentNeighborDist(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_neighbor_dist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_74setAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_neighbor_dist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentNeighborDist", 0);

  /* "rvo2.pyx":258
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)             # <<<<<<<<<<<<<<
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 */
  __pyx_v_self->thisptr->setAgentNeighborDist(__pyx_v_agent_no, __pyx_v_neighbor_dist);

  /* "rvo2.pyx":257
 *     def setAgentMaxSpeed(self, size_t agent_no, float max_speed):
 *         self.thisptr.setAgentMaxSpeed(agent_no, max_speed)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":259
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentPosition(self, size_t agent_no, tuple position):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_77setAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_77setAgentNeighborDist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_neighbor_dist;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentNeighborDist (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_neighbor_dist,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_neighbor_dist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentNeighborDist", 1, 2, 2, 1); __PYX_ERR(0, 259, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentNeighborDist") < 0)) __PYX_ERR(0, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L3_error)
    __pyx_v_neighbor_dist = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_neighbor_dist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentNeighborDist", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentNeighborDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_76setAgentNeighborDist(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_neighbor_dist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_76setAgentNeighborDist(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_neighbor_dist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentNeighborDist", 0);

  /* "rvo2.pyx":260
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)             # <<<<<<<<<<<<<<
 *     def setAgentPosition(self, size_t agent_no, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 */
  __pyx_v_self->thisptr->setAgentNeighborDist(__pyx_v_agent_no, __pyx_v_neighbor_dist);

  /* "rvo2.pyx":259
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentPosition(self, size_t agent_no, tuple position):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":261
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentPosition(self, size_t agent_no, tuple position):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_79setAgentPosition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_79setAgentPosition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_v_position = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentPosition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_position,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentPosition", 1, 2, 2, 1); __PYX_ERR(0, 261, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentPosition") < 0)) __PYX_ERR(0, 261, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L3_error)
    __pyx_v_position = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentPosition", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 261, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), (&PyTuple_Type), 1, "position", 1))) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_78setAgentPosition(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_position);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_78setAgentPosition(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_position) {
  RVO::Vector2 __pyx_v_c_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("setAgentPosition", 0);

  /* "rvo2.pyx":262
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentPosition(self, size_t agent_no, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):
 */
  if (unlikely(__pyx_v_position == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 262, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_position, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_position == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 262, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_position, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 262, __pyx_L1_error)
  }
  __pyx_v_c_pos = __pyx_t_4;

  /* "rvo2.pyx":263
 *     def setAgentPosition(self, size_t agent_no, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentPosition(agent_no, c_pos)             # <<<<<<<<<<<<<<
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 */
  __pyx_v_self->thisptr->setAgentPosition(__pyx_v_agent_no, __pyx_v_c_pos);

  /* "rvo2.pyx":261
 *     def setAgentNeighborDist(self, size_t agent_no, float neighbor_dist):
 *         self.thisptr.setAgentNeighborDist(agent_no, neighbor_dist)
 *     def setAgentPosition(self, size_t agent_no, tuple position):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentPosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":264
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_81setAgentPrefVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_81setAgentPrefVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_v_velocity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentPrefVelocity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_velocity,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentPrefVelocity", 1, 2, 2, 1); __PYX_ERR(0, 264, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentPrefVelocity") < 0)) __PYX_ERR(0, 264, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L3_error)
    __pyx_v_velocity = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentPrefVelocity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentPrefVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), (&PyTuple_Type), 1, "velocity", 1))) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_80setAgentPrefVelocity(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_velocity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_80setAgentPrefVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("setAgentPrefVelocity", 0);

  /* "rvo2.pyx":265
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 *     def setAgentRadius(self, size_t agent_no, float radius):
 */
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_v_c_velocity = __pyx_t_4;

  /* "rvo2.pyx":266
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)             # <<<<<<<<<<<<<<
 *     def setAgentRadius(self, size_t agent_no, float radius):
 *         self.thisptr.setAgentRadius(agent_no, radius)
 */
  __pyx_v_self->thisptr->setAgentPrefVelocity(__pyx_v_agent_no, __pyx_v_c_velocity);

  /* "rvo2.pyx":264
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentPosition(agent_no, c_pos)
 *     def setAgentPrefVelocity(self, size_t agent_no, tuple velocity):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentPrefVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":267
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 *     def setAgentRadius(self, size_t agent_no, float radius):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentRadius(agent_no, radius)
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_83setAgentRadius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_83setAgentRadius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_radius;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentRadius (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_radius,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentRadius", 1, 2, 2, 1); __PYX_ERR(0, 267, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentRadius") < 0)) __PYX_ERR(0, 267, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentRadius", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentRadius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_82setAgentRadius(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_radius);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_82setAgentRadius(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_radius) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentRadius", 0);

  /* "rvo2.pyx":268
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 *     def setAgentRadius(self, size_t agent_no, float radius):
 *         self.thisptr.setAgentRadius(agent_no, radius)             # <<<<<<<<<<<<<<
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 */
  __pyx_v_self->thisptr->setAgentRadius(__pyx_v_agent_no, __pyx_v_radius);

  /* "rvo2.pyx":267
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentPrefVelocity(agent_no, c_velocity)
 *     def setAgentRadius(self, size_t agent_no, float radius):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentRadius(agent_no, radius)
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":269
 *     def setAgentRadius(self, size_t agent_no, float radius):
 *         self.thisptr.setAgentRadius(agent_no, radius)
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_85setAgentTimeHorizon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_85setAgentTimeHorizon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_time_horizon;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentTimeHorizon (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_time_horizon,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_horizon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentTimeHorizon", 1, 2, 2, 1); __PYX_ERR(0, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentTimeHorizon") < 0)) __PYX_ERR(0, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
    __pyx_v_time_horizon = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_time_horizon == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentTimeHorizon", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentTimeHorizon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_84setAgentTimeHorizon(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_time_horizon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_84setAgentTimeHorizon(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_time_horizon) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentTimeHorizon", 0);

  /* "rvo2.pyx":270
 *         self.thisptr.setAgentRadius(agent_no, radius)
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)             # <<<<<<<<<<<<<<
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 */
  __pyx_v_self->thisptr->setAgentTimeHorizon(__pyx_v_agent_no, __pyx_v_time_horizon);

  /* "rvo2.pyx":269
 *     def setAgentRadius(self, size_t agent_no, float radius):
 *         self.thisptr.setAgentRadius(agent_no, radius)
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":271
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_87setAgentTimeHorizonObst(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_87setAgentTimeHorizonObst(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  float __pyx_v_timeHorizonObst;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentTimeHorizonObst (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_timeHorizonObst,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeHorizonObst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentTimeHorizonObst", 1, 2, 2, 1); __PYX_ERR(0, 271, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentTimeHorizonObst") < 0)) __PYX_ERR(0, 271, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L3_error)
    __pyx_v_timeHorizonObst = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_timeHorizonObst == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentTimeHorizonObst", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentTimeHorizonObst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_86setAgentTimeHorizonObst(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_timeHorizonObst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_86setAgentTimeHorizonObst(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, float __pyx_v_timeHorizonObst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentTimeHorizonObst", 0);

  /* "rvo2.pyx":272
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)             # <<<<<<<<<<<<<<
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 */
  __pyx_v_self->thisptr->setAgentTimeHorizonObst(__pyx_v_agent_no, __pyx_v_timeHorizonObst);

  /* "rvo2.pyx":271
 *     def setAgentTimeHorizon(self, size_t agent_no, float time_horizon):
 *         self.thisptr.setAgentTimeHorizon(agent_no, time_horizon)
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":273
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_89setAgentVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_89setAgentVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agent_no;
  PyObject *__pyx_v_velocity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentVelocity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agent_no,&__pyx_n_s_velocity,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agent_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentVelocity", 1, 2, 2, 1); __PYX_ERR(0, 273, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentVelocity") < 0)) __PYX_ERR(0, 273, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agent_no = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agent_no == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L3_error)
    __pyx_v_velocity = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentVelocity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 273, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), (&PyTuple_Type), 1, "velocity", 1))) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_88setAgentVelocity(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agent_no, __pyx_v_velocity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_88setAgentVelocity(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agent_no, PyObject *__pyx_v_velocity) {
  RVO::Vector2 __pyx_v_c_velocity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("setAgentVelocity", 0);

  /* "rvo2.pyx":274
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):
 */
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_velocity == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_velocity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_v_c_velocity = __pyx_t_4;

  /* "rvo2.pyx":275
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)             # <<<<<<<<<<<<<<
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 */
  __pyx_v_self->thisptr->setAgentVelocity(__pyx_v_agent_no, __pyx_v_c_velocity);

  /* "rvo2.pyx":273
 *     def setAgentTimeHorizonObst(self, size_t agent_no, float timeHorizonObst):
 *         self.thisptr.setAgentTimeHorizonObst(agent_no, timeHorizonObst)
 *     def setAgentVelocity(self, size_t agent_no, tuple velocity):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":276
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 *     def setTimeStep(self, float time_step):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_91setCarProperties(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_91setCarProperties(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_length;
  float __pyx_v_radius;
  float __pyx_v_vDrivingMax;
  float __pyx_v_vSteeringMax;
  float __pyx_v_aDrivingMax;
  float __pyx_v_phiMax;
  float __pyx_v_dtc;
  float __pyx_v_errorPreferred;
  float __pyx_v_ka;
  float __pyx_v_kv;
  float __pyx_v_kp;
  float __pyx_v_deltaV;
  float __pyx_v_deltaPhi;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCarProperties (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,&__pyx_n_s_radius,&__pyx_n_s_vDrivingMax,&__pyx_n_s_vSteeringMax,&__pyx_n_s_aDrivingMax,&__pyx_n_s_phiMax,&__pyx_n_s_dtc,&__pyx_n_s_errorPreferred,&__pyx_n_s_ka,&__pyx_n_s_kv,&__pyx_n_s_kp,&__pyx_n_s_deltaV,&__pyx_n_s_deltaPhi,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 1); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vDrivingMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 2); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vSteeringMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 3); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aDrivingMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 4); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phiMax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 5); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 6); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errorPreferred)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 7); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ka)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 8); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 9); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 10); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deltaV)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 11); __PYX_ERR(0, 276, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deltaPhi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, 12); __PYX_ERR(0, 276, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCarProperties") < 0)) __PYX_ERR(0, 276, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 13) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
    }
    __pyx_v_length = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_length == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_vDrivingMax = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_vDrivingMax == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_vSteeringMax = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_vSteeringMax == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_aDrivingMax = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_aDrivingMax == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_phiMax = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_phiMax == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_dtc = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_dtc == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_errorPreferred = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_errorPreferred == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_ka = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_ka == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_kv = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_kv == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_kp = __pyx_PyFloat_AsFloat(values[10]); if (unlikely((__pyx_v_kp == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_deltaV = __pyx_PyFloat_AsFloat(values[11]); if (unlikely((__pyx_v_deltaV == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_deltaPhi = __pyx_PyFloat_AsFloat(values[12]); if (unlikely((__pyx_v_deltaPhi == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCarProperties", 1, 13, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setCarProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_90setCarProperties(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_length, __pyx_v_radius, __pyx_v_vDrivingMax, __pyx_v_vSteeringMax, __pyx_v_aDrivingMax, __pyx_v_phiMax, __pyx_v_dtc, __pyx_v_errorPreferred, __pyx_v_ka, __pyx_v_kv, __pyx_v_kp, __pyx_v_deltaV, __pyx_v_deltaPhi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_90setCarProperties(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_length, float __pyx_v_radius, float __pyx_v_vDrivingMax, float __pyx_v_vSteeringMax, float __pyx_v_aDrivingMax, float __pyx_v_phiMax, float __pyx_v_dtc, float __pyx_v_errorPreferred, float __pyx_v_ka, float __pyx_v_kv, float __pyx_v_kp, float __pyx_v_deltaV, float __pyx_v_deltaPhi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCarProperties", 0);

  /* "rvo2.pyx":277
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)             # <<<<<<<<<<<<<<
 *     def setTimeStep(self, float time_step):
 *         self.thisptr.setTimeStep(time_step)
 */
  __pyx_v_self->thisptr->setCarProperties(__pyx_v_length, __pyx_v_radius, __pyx_v_vDrivingMax, __pyx_v_vSteeringMax, __pyx_v_aDrivingMax, __pyx_v_phiMax, __pyx_v_dtc, __pyx_v_errorPreferred, __pyx_v_ka, __pyx_v_kv, __pyx_v_kp, __pyx_v_deltaV, __pyx_v_deltaPhi);

  /* "rvo2.pyx":276
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentVelocity(agent_no, c_velocity)
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):             # <<<<<<<<<<<<<<
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 *     def setTimeStep(self, float time_step):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":278
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 *     def setTimeStep(self, float time_step):             # <<<<<<<<<<<<<<
 *         self.thisptr.setTimeStep(time_step)
 *     def shouldUpdate(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_93setTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_arg_time_step); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_93setTimeStep(PyObject *__pyx_v_self, PyObject *__pyx_arg_time_step) {
  float __pyx_v_time_step;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeStep (wrapper)", 0);
  assert(__pyx_arg_time_step); {
    __pyx_v_time_step = __pyx_PyFloat_AsFloat(__pyx_arg_time_step); if (unlikely((__pyx_v_time_step == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setTimeStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_92setTimeStep(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((float)__pyx_v_time_step));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_92setTimeStep(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, float __pyx_v_time_step) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeStep", 0);

  /* "rvo2.pyx":279
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 *     def setTimeStep(self, float time_step):
 *         self.thisptr.setTimeStep(time_step)             # <<<<<<<<<<<<<<
 *     def shouldUpdate(self):
 *         return self.thisptr.shouldUpdate()
 */
  __pyx_v_self->thisptr->setTimeStep(__pyx_v_time_step);

  /* "rvo2.pyx":278
 *     def setCarProperties(self, float length, float radius, float vDrivingMax, float vSteeringMax, float aDrivingMax, float phiMax, float dtc, float errorPreferred, float ka, float kv, float kp, float deltaV, float deltaPhi):
 *         self.thisptr.setCarProperties(length, radius, vDrivingMax, vSteeringMax, aDrivingMax, phiMax, dtc, errorPreferred, ka, kv, kp, deltaV, deltaPhi)
 *     def setTimeStep(self, float time_step):             # <<<<<<<<<<<<<<
 *         self.thisptr.setTimeStep(time_step)
 *     def shouldUpdate(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":280
 *     def setTimeStep(self, float time_step):
 *         self.thisptr.setTimeStep(time_step)
 *     def shouldUpdate(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.shouldUpdate()
 *     def setAgentCar(self, size_t agentCarNo, tuple position):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_95shouldUpdate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_95shouldUpdate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shouldUpdate (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_94shouldUpdate(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_94shouldUpdate(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("shouldUpdate", 0);

  /* "rvo2.pyx":281
 *         self.thisptr.setTimeStep(time_step)
 *     def shouldUpdate(self):
 *         return self.thisptr.shouldUpdate()             # <<<<<<<<<<<<<<
 *     def setAgentCar(self, size_t agentCarNo, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->shouldUpdate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":280
 *     def setTimeStep(self, float time_step):
 *         self.thisptr.setTimeStep(time_step)
 *     def shouldUpdate(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.shouldUpdate()
 *     def setAgentCar(self, size_t agentCarNo, tuple position):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.shouldUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":282
 *     def shouldUpdate(self):
 *         return self.thisptr.shouldUpdate()
 *     def setAgentCar(self, size_t agentCarNo, tuple position):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_97setAgentCar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_97setAgentCar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_agentCarNo;
  PyObject *__pyx_v_position = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAgentCar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_agentCarNo,&__pyx_n_s_position,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_agentCarNo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAgentCar", 1, 2, 2, 1); __PYX_ERR(0, 282, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAgentCar") < 0)) __PYX_ERR(0, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_agentCarNo = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_agentCarNo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L3_error)
    __pyx_v_position = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAgentCar", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentCar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), (&PyTuple_Type), 1, "position", 1))) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_96setAgentCar(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), __pyx_v_agentCarNo, __pyx_v_position);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_96setAgentCar(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentCarNo, PyObject *__pyx_v_position) {
  RVO::Vector2 __pyx_v_c_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  RVO::Vector2 __pyx_t_4;
  __Pyx_RefNannySetupContext("setAgentCar", 0);

  /* "rvo2.pyx":283
 *         return self.thisptr.shouldUpdate()
 *     def setAgentCar(self, size_t agentCarNo, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])             # <<<<<<<<<<<<<<
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 *     def getAgentCarTheta(self, size_t agentNo):
 */
  if (unlikely(__pyx_v_position == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_position, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_position == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_position, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = RVO::Vector2(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __pyx_v_c_pos = __pyx_t_4;

  /* "rvo2.pyx":284
 *     def setAgentCar(self, size_t agentCarNo, tuple position):
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)             # <<<<<<<<<<<<<<
 *     def getAgentCarTheta(self, size_t agentNo):
 *         return self.thisptr.getAgentCarTheta(agentNo)
 */
  __pyx_v_self->thisptr->setAgentCar(__pyx_v_agentCarNo, __pyx_v_c_pos);

  /* "rvo2.pyx":282
 *     def shouldUpdate(self):
 *         return self.thisptr.shouldUpdate()
 *     def setAgentCar(self, size_t agentCarNo, tuple position):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.setAgentCar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":285
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 *     def getAgentCarTheta(self, size_t agentNo):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentCarTheta(agentNo)
 *     def getAgentCarPhi(self, size_t agentNo):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_99getAgentCarTheta(PyObject *__pyx_v_self, PyObject *__pyx_arg_agentNo); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_99getAgentCarTheta(PyObject *__pyx_v_self, PyObject *__pyx_arg_agentNo) {
  size_t __pyx_v_agentNo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentCarTheta (wrapper)", 0);
  assert(__pyx_arg_agentNo); {
    __pyx_v_agentNo = __Pyx_PyInt_As_size_t(__pyx_arg_agentNo); if (unlikely((__pyx_v_agentNo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentCarTheta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_98getAgentCarTheta(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agentNo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_98getAgentCarTheta(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentNo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentCarTheta", 0);

  /* "rvo2.pyx":286
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 *     def getAgentCarTheta(self, size_t agentNo):
 *         return self.thisptr.getAgentCarTheta(agentNo)             # <<<<<<<<<<<<<<
 *     def getAgentCarPhi(self, size_t agentNo):
 *         return self.thisptr.getAgentCarPhi(agentNo)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentCarTheta(__pyx_v_agentNo)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":285
 *         cdef Vector2 c_pos = Vector2(position[0], position[1])
 *         self.thisptr.setAgentCar(agentCarNo, c_pos)
 *     def getAgentCarTheta(self, size_t agentNo):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentCarTheta(agentNo)
 *     def getAgentCarPhi(self, size_t agentNo):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentCarTheta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rvo2.pyx":287
 *     def getAgentCarTheta(self, size_t agentNo):
 *         return self.thisptr.getAgentCarTheta(agentNo)
 *     def getAgentCarPhi(self, size_t agentNo):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentCarPhi(agentNo)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_101getAgentCarPhi(PyObject *__pyx_v_self, PyObject *__pyx_arg_agentNo); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_101getAgentCarPhi(PyObject *__pyx_v_self, PyObject *__pyx_arg_agentNo) {
  size_t __pyx_v_agentNo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgentCarPhi (wrapper)", 0);
  assert(__pyx_arg_agentNo); {
    __pyx_v_agentNo = __Pyx_PyInt_As_size_t(__pyx_arg_agentNo); if (unlikely((__pyx_v_agentNo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentCarPhi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_100getAgentCarPhi(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((size_t)__pyx_v_agentNo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_100getAgentCarPhi(struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, size_t __pyx_v_agentNo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAgentCarPhi", 0);

  /* "rvo2.pyx":288
 *         return self.thisptr.getAgentCarTheta(agentNo)
 *     def getAgentCarPhi(self, size_t agentNo):
 *         return self.thisptr.getAgentCarPhi(agentNo)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getAgentCarPhi(__pyx_v_agentNo)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rvo2.pyx":287
 *     def getAgentCarTheta(self, size_t agentNo):
 *         return self.thisptr.getAgentCarTheta(agentNo)
 *     def getAgentCarPhi(self, size_t agentNo):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getAgentCarPhi(agentNo)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.getAgentCarPhi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_103__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_103__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_102__reduce_cython__(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_105__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4rvo2_14PyRVOSimulator_105__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4rvo2_14PyRVOSimulator_104__setstate_cython__(((struct __pyx_obj_4rvo2_PyRVOSimulator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4rvo2_14PyRVOSimulator_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4rvo2_PyRVOSimulator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rvo2.PyRVOSimulator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4rvo2_PyRVOSimulator(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4rvo2_14PyRVOSimulator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4rvo2_PyRVOSimulator(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4rvo2_PyRVOSimulator[] = {
  {"addAgent", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_3addAgent, METH_VARARGS|METH_KEYWORDS, 0},
  {"addAgentCar", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_5addAgentCar, METH_VARARGS|METH_KEYWORDS, 0},
  {"setCarLookupTable", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_7setCarLookupTable, METH_NOARGS, 0},
  {"addObstacle", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_9addObstacle, METH_O, 0},
  {"clearObstacle", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_11clearObstacle, METH_NOARGS, 0},
  {"doStep", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_13doStep, METH_NOARGS, 0},
  {"computeAgents", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_15computeAgents, METH_NOARGS, 0},
  {"updateAgents", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_17updateAgents, METH_NOARGS, 0},
  {"doStepCar", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_19doStepCar, METH_NOARGS, 0},
  {"getAgentAgentNeighbor", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_21getAgentAgentNeighbor, METH_VARARGS|METH_KEYWORDS, 0},
  {"getAgentMaxNeighbors", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_23getAgentMaxNeighbors, METH_O, 0},
  {"getAgentMaxSpeed", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_25getAgentMaxSpeed, METH_O, 0},
  {"getAgentNeighborDist", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_27getAgentNeighborDist, METH_O, 0},
  {"getAgentNumAgentNeighbors", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_29getAgentNumAgentNeighbors, METH_O, 0},
  {"getAgentNumObstacleNeighbors", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_31getAgentNumObstacleNeighbors, METH_O, 0},
  {"getAgentNumORCALines", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_33getAgentNumORCALines, METH_O, 0},
  {"getAgentObstacleNeighbor", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_35getAgentObstacleNeighbor, METH_VARARGS|METH_KEYWORDS, 0},
  {"getAgentORCALine", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_37getAgentORCALine, METH_VARARGS|METH_KEYWORDS, 0},
  {"getAgentPosition", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_39getAgentPosition, METH_O, 0},
  {"getAgentPrefVelocity", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_41getAgentPrefVelocity, METH_O, 0},
  {"getAgentRadius", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_43getAgentRadius, METH_O, 0},
  {"getAgentTimeHorizon", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_45getAgentTimeHorizon, METH_O, 0},
  {"getAgentTimeHorizonObst", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_47getAgentTimeHorizonObst, METH_O, 0},
  {"getAgentVelocity", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_49getAgentVelocity, METH_O, 0},
  {"getGlobalTime", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_51getGlobalTime, METH_NOARGS, 0},
  {"getNumAgents", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_53getNumAgents, METH_NOARGS, 0},
  {"getNumObstacleVertices", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_55getNumObstacleVertices, METH_NOARGS, 0},
  {"getObstacleVertex", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_57getObstacleVertex, METH_O, 0},
  {"getNextObstacleVertexNo", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_59getNextObstacleVertexNo, METH_O, 0},
  {"getPrevObstacleVertexNo", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_61getPrevObstacleVertexNo, METH_O, 0},
  {"getTimeStep", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_63getTimeStep, METH_NOARGS, 0},
  {"processObstacles", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_65processObstacles, METH_NOARGS, 0},
  {"queryVisibility", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_67queryVisibility, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentDefaults", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_69setAgentDefaults, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentMaxNeighbors", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_71setAgentMaxNeighbors, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentMaxSpeed", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_73setAgentMaxSpeed, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentNeighborDist", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_75setAgentNeighborDist, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentNeighborDist", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_77setAgentNeighborDist, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentPosition", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_79setAgentPosition, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentPrefVelocity", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_81setAgentPrefVelocity, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentRadius", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_83setAgentRadius, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentTimeHorizon", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_85setAgentTimeHorizon, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentTimeHorizonObst", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_87setAgentTimeHorizonObst, METH_VARARGS|METH_KEYWORDS, 0},
  {"setAgentVelocity", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_89setAgentVelocity, METH_VARARGS|METH_KEYWORDS, 0},
  {"setCarProperties", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_91setCarProperties, METH_VARARGS|METH_KEYWORDS, 0},
  {"setTimeStep", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_93setTimeStep, METH_O, 0},
  {"shouldUpdate", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_95shouldUpdate, METH_NOARGS, 0},
  {"setAgentCar", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_97setAgentCar, METH_VARARGS|METH_KEYWORDS, 0},
  {"getAgentCarTheta", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_99getAgentCarTheta, METH_O, 0},
  {"getAgentCarPhi", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_101getAgentCarPhi, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_103__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4rvo2_14PyRVOSimulator_105__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4rvo2_PyRVOSimulator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rvo2.PyRVOSimulator", /*tp_name*/
  sizeof(struct __pyx_obj_4rvo2_PyRVOSimulator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4rvo2_PyRVOSimulator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4rvo2_PyRVOSimulator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4rvo2_PyRVOSimulator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "rvo2",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Either_pass_only_pos_or_pass_all, __pyx_k_Either_pass_only_pos_or_pass_all, sizeof(__pyx_k_Either_pass_only_pos_or_pass_all), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_adding_agent_to_RVO_simula, __pyx_k_Error_adding_agent_to_RVO_simula, sizeof(__pyx_k_Error_adding_agent_to_RVO_simula), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_adding_obstacle_to_RVO_sim, __pyx_k_Error_adding_obstacle_to_RVO_sim, sizeof(__pyx_k_Error_adding_obstacle_to_RVO_sim), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_aDrivingMax, __pyx_k_aDrivingMax, sizeof(__pyx_k_aDrivingMax), 0, 0, 1, 1},
  {&__pyx_n_s_agentCarNo, __pyx_k_agentCarNo, sizeof(__pyx_k_agentCarNo), 0, 0, 1, 1},
  {&__pyx_n_s_agent_no, __pyx_k_agent_no, sizeof(__pyx_k_agent_no), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_deltaPhi, __pyx_k_deltaPhi, sizeof(__pyx_k_deltaPhi), 0, 0, 1, 1},
  {&__pyx_n_s_deltaV, __pyx_k_deltaV, sizeof(__pyx_k_deltaV), 0, 0, 1, 1},
  {&__pyx_n_s_dtc, __pyx_k_dtc, sizeof(__pyx_k_dtc), 0, 0, 1, 1},
  {&__pyx_n_s_errorPreferred, __pyx_k_errorPreferred, sizeof(__pyx_k_errorPreferred), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ka, __pyx_k_ka, sizeof(__pyx_k_ka), 0, 0, 1, 1},
  {&__pyx_n_s_kp, __pyx_k_kp, sizeof(__pyx_k_kp), 0, 0, 1, 1},
  {&__pyx_n_s_kv, __pyx_k_kv, sizeof(__pyx_k_kv), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_line_no, __pyx_k_line_no, sizeof(__pyx_k_line_no), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxNeighbors, __pyx_k_maxNeighbors, sizeof(__pyx_k_maxNeighbors), 0, 0, 1, 1},
  {&__pyx_n_s_maxSpeed, __pyx_k_maxSpeed, sizeof(__pyx_k_maxSpeed), 0, 0, 1, 1},
  {&__pyx_n_s_max_neighbors, __pyx_k_max_neighbors, sizeof(__pyx_k_max_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_max_speed, __pyx_k_max_speed, sizeof(__pyx_k_max_speed), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_neighborDist, __pyx_k_neighborDist, sizeof(__pyx_k_neighborDist), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_dist, __pyx_k_neighbor_dist, sizeof(__pyx_k_neighbor_dist), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_no, __pyx_k_neighbor_no, sizeof(__pyx_k_neighbor_no), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obstacle_no, __pyx_k_obstacle_no, sizeof(__pyx_k_obstacle_no), 0, 0, 1, 1},
  {&__pyx_n_s_phiMax, __pyx_k_phiMax, sizeof(__pyx_k_phiMax), 0, 0, 1, 1},
  {&__pyx_n_s_point1, __pyx_k_point1, sizeof(__pyx_k_point1), 0, 0, 1, 1},
  {&__pyx_n_s_point2, __pyx_k_point2, sizeof(__pyx_k_point2), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timeHorizon, __pyx_k_timeHorizon, sizeof(__pyx_k_timeHorizon), 0, 0, 1, 1},
  {&__pyx_n_s_timeHorizonObst, __pyx_k_timeHorizonObst, sizeof(__pyx_k_timeHorizonObst), 0, 0, 1, 1},
  {&__pyx_n_s_timeStep, __pyx_k_timeStep, sizeof(__pyx_k_timeStep), 0, 0, 1, 1},
  {&__pyx_n_s_time_horizon, __pyx_k_time_horizon, sizeof(__pyx_k_time_horizon), 0, 0, 1, 1},
  {&__pyx_n_s_time_horizon_obst, __pyx_k_time_horizon_obst, sizeof(__pyx_k_time_horizon_obst), 0, 0, 1, 1},
  {&__pyx_n_s_vDrivingMax, __pyx_k_vDrivingMax, sizeof(__pyx_k_vDrivingMax), 0, 0, 1, 1},
  {&__pyx_n_s_vSteeringMax, __pyx_k_vSteeringMax, sizeof(__pyx_k_vSteeringMax), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rvo2.pyx":97
 *     def __cinit__(self, float timeStep, float neighborDist, size_t maxNeighbors,
 *                   float timeHorizon, float timeHorizonObst, float radius,
 *                   float maxSpeed, tuple velocity=(0, 0)):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "rvo2.pyx":112
 * 
 *         if neighborDist is not None and velocity is None:
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")             # <<<<<<<<<<<<<<
 * 
 *         if neighborDist is None:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Either_pass_only_pos_or_pass_all); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "rvo2.pyx":124
 * 
 *         if agent_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding agent to RVO simulation')             # <<<<<<<<<<<<<<
 * 
 *         return agent_nr
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Error_adding_agent_to_RVO_simula); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "rvo2.pyx":136
 * 
 *         if neighborDist is not None and velocity is None:
 *             raise ValueError("Either pass only 'pos', or pass all parameters.")             # <<<<<<<<<<<<<<
 * 
 *         if neighborDist is None:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Either_pass_only_pos_or_pass_all); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "rvo2.pyx":148
 * 
 *         if agent_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding agent to RVO simulation')             # <<<<<<<<<<<<<<
 * 
 *         return agent_nr
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Error_adding_agent_to_RVO_simula); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "rvo2.pyx":163
 *         obstacle_nr = self.thisptr.addObstacle(c_vertices)
 *         if obstacle_nr == RVO_ERROR:
 *             raise RuntimeError('Error adding obstacle to RVO simulation')             # <<<<<<<<<<<<<<
 *         return obstacle_nr
 *     def clearObstacle(self):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Error_adding_obstacle_to_RVO_sim); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "rvo2.pyx":248
 *     def setAgentDefaults(self, float neighbor_dist, size_t max_neighbors, float time_horizon,
 *                          float time_horizon_obst, float radius, float max_speed,
 *                          tuple velocity=(0, 0)):             # <<<<<<<<<<<<<<
 *         cdef Vector2 c_velocity = Vector2(velocity[0], velocity[1])
 *         self.thisptr.setAgentDefaults(neighbor_dist, max_neighbors, time_horizon,
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initrvo2(void); /*proto*/
PyMODINIT_FUNC initrvo2(void)
#else
PyMODINIT_FUNC PyInit_rvo2(void); /*proto*/
PyMODINIT_FUNC PyInit_rvo2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_rvo2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("rvo2", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rvo2) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rvo2")) {
      if (unlikely(PyDict_SetItemString(modules, "rvo2", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4rvo2_PyRVOSimulator) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_type_4rvo2_PyRVOSimulator.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyRVOSimulator", (PyObject *)&__pyx_type_4rvo2_PyRVOSimulator) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4rvo2_PyRVOSimulator) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_ptype_4rvo2_PyRVOSimulator = &__pyx_type_4rvo2_PyRVOSimulator;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "rvo2.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init rvo2", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rvo2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* GetItemInt */
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_COMPILING_IN_CPYTHON
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
